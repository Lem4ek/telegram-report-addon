import os
import re
import asyncio
import pandas as pd
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

DATA_FOLDER = "/config/bnk_bot/data"
FILE_NAME = f"{datetime.now().strftime('%Y-%m')}.xlsx"
FILE_PATH = os.path.join(DATA_FOLDER, FILE_NAME)

os.makedirs(DATA_FOLDER, exist_ok=True)

data_columns = ["User", "–î–∞—Ç–∞", "–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è", "–ò—Ç–æ–≥–æ"]

if not os.path.exists(FILE_PATH):
    df = pd.DataFrame(columns=data_columns)
    df.to_excel(FILE_PATH, index=False)

COMMANDS = [
    BotCommand("csv", "üìÑ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
    BotCommand("reset", "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
    BotCommand("stats", "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
]

def extract_data_from_message(text):
    data = {
        "–ü–∞–∫–æ–≤": 0,
        "–í–µ—Å": 0,
        "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0,
        "–§–ª–µ–∫—Å–∞": 0,
        "–≠–∫—Å—Ç—Ä—É–∑–∏—è": "",
        "–ò—Ç–æ–≥–æ": 0
    }
    for line in text.splitlines():
        if "–ø–∞–∫–æ–≤" in line.lower():
            data["–ü–∞–∫–æ–≤"] = int(re.findall(r'\d+', line)[0])
        elif "–≤–µ—Å" in line.lower():
            data["–í–µ—Å"] = int(re.findall(r'\d+', line)[0])
        elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in line.lower():
            data["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = int(re.findall(r'\d+', line)[0])
        elif "—Ñ–ª–µ–∫—Å" in line.lower():
            data["–§–ª–µ–∫—Å–∞"] = int(re.findall(r'\d+', line)[0])
        elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in line.lower():
            match = re.search(r"–º\d+ —Ç\d+", line)
            if match:
                data["–≠–∫—Å—Ç—Ä—É–∑–∏—è"] = match.group()
        elif "–∏—Ç–æ–≥–æ" in line.lower():
            data["–ò—Ç–æ–≥–æ"] = int(re.findall(r'\d+', line)[0])
    return data

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.username or user.first_name
    data = extract_data_from_message(update.message.text)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    df = pd.read_excel(FILE_PATH)
    df.loc[len(df)] = [user_name, now, data["–ü–∞–∫–æ–≤"], data["–í–µ—Å"], data["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"], data["–§–ª–µ–∫—Å–∞"], data["–≠–∫—Å—Ç—Ä—É–∑–∏—è"], data["–ò—Ç–æ–≥–æ"]]
    df.to_excel(FILE_PATH, index=False)

    message = [
        f"–ü—Ä–∏–Ω—è—Ç–æ –æ—Ç {user_name}:",
        f"üì¶ –ü–∞–∫–æ–≤: {data['–ü–∞–∫–æ–≤']}",
        f"‚öñÔ∏è –í–µ—Å: {data['–í–µ—Å']}",
        f"‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:",
        f"  üßµ –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {data['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']}",
        f"  üé® –§–ª–µ–∫—Å–∞: {data['–§–ª–µ–∫—Å–∞']}",
        f"  üè≠ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {data['–≠–∫—Å—Ç—Ä—É–∑–∏—è']}",
        f"‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {data['–ò—Ç–æ–≥–æ']}"
    ]
    await update.message.reply_text("\n".join(message))

async def send_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = pd.read_excel(FILE_PATH)
    df = df.copy()
    df["–≠–∫—Å—Ç—Ä—É–∑–∏—è"] = df["–≠–∫—Å—Ç—Ä—É–∑–∏—è"].str.replace("—ç–∫—Å—Ç—Ä—É–∑–∏—è", "", case=False, regex=False).str.strip()
    temp_path = FILE_PATH.replace(".xlsx", "_copy.xlsx")
    df.to_excel(temp_path, index=False)
    await update.message.reply_document(document=open(temp_path, "rb"))

async def reset_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pd.DataFrame(columns=data_columns).to_excel(FILE_PATH, index=False)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")

async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = pd.read_excel(FILE_PATH)
    if df.empty:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return

    summary = df.groupby("User")[["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–ò—Ç–æ–≥–æ"]].sum()
    report_lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"]
    for user, row in summary.iterrows():
        report_lines.append(f"üë§ {user}: üì¶{row['–ü–∞–∫–æ–≤']} ‚öñÔ∏è{row['–í–µ—Å']} üßµ{row['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']} üé®{row['–§–ª–µ–∫—Å–∞']} ‚ôªÔ∏è{row['–ò—Ç–æ–≥–æ']}")
    await update.message.reply_text("\n".join(report_lines))

async def main():
    token = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("csv", send_csv))
    app.add_handler(CommandHandler("reset", reset_data))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.bot.set_my_commands(COMMANDS)
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
