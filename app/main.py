import os
import asyncio
import pandas as pd
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

DATA_FOLDER = "data"
EXCEL_FILE = os.path.join(DATA_FOLDER, f"report_{datetime.now().strftime('%Y_%m')}.xlsx")
if not os.path.exists(DATA_FOLDER):
    os.makedirs(DATA_FOLDER)

columns = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è", "–ò—Ç–æ–≥–æ"]
if not os.path.exists(EXCEL_FILE):
    df = pd.DataFrame(columns=columns)
    df.to_excel(EXCEL_FILE, index=False)

def extract_data(text):
    data = {"–ü–∞–∫–æ–≤": 0, "–í–µ—Å": 0, "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0, "–§–ª–µ–∫—Å–∞": 0, "–≠–∫—Å—Ç—Ä—É–∑–∏—è": "", "–ò—Ç–æ–≥–æ": 0}
    lines = text.splitlines()
    for line in lines:
        l = line.lower()
        if "–ø–∞–∫–æ–≤" in l:
            data["–ü–∞–∫–æ–≤"] = int("".join(filter(str.isdigit, line)))
        elif "–≤–µ—Å" in l:
            data["–í–µ—Å"] = int("".join(filter(str.isdigit, line)))
        elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in l:
            data["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = int("".join(filter(str.isdigit, line)))
        elif "—Ñ–ª–µ–∫—Å" in l:
            data["–§–ª–µ–∫—Å–∞"] = int("".join(filter(str.isdigit, line)))
        elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in l:
            data["–≠–∫—Å—Ç—Ä—É–∑–∏—è"] = line.replace("–≠–∫—Å—Ç—Ä—É–∑–∏—è", "").strip()
        elif "–∏—Ç–æ–≥–æ" in l:
            data["–ò—Ç–æ–≥–æ"] = int("".join(filter(str.isdigit, line)))
    return data

def save_data(user: str, data: dict):
    df = pd.read_excel(EXCEL_FILE)
    row = {
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": user,
        "–ü–∞–∫–æ–≤": data["–ü–∞–∫–æ–≤"],
        "–í–µ—Å": data["–í–µ—Å"],
        "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": data["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"],
        "–§–ª–µ–∫—Å–∞": data["–§–ª–µ–∫—Å–∞"],
        "–≠–∫—Å—Ç—Ä—É–∑–∏—è": data["–≠–∫—Å—Ç—Ä—É–∑–∏—è"],
        "–ò—Ç–æ–≥–æ": data["–ò—Ç–æ–≥–æ"],
    }
    df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)
    df.to_excel(EXCEL_FILE, index=False)

def generate_stats():
    df = pd.read_excel(EXCEL_FILE)
    if df.empty:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    stats = df.groupby("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")[["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–ò—Ç–æ–≥–æ"]].sum()
    msg = "\ud83c\udf09 <b>\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c:</b>\n"
    for user, row in stats.iterrows():
        msg += f"\n<b>{user}</b>\nüì¶ {row['–ü–∞–∫–æ–≤']} | ‚öñÔ∏è {row['–í–µ—Å']} | üßµ {row['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']} | üé® {row['–§–ª–µ–∫—Å–∞']} | ‚ôªÔ∏è {row['–ò—Ç–æ–≥–æ']}"
    return msg

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    data = extract_data(update.message.text)
    save_data(user_name, data)
    response_text = (
        f"–ü—Ä–∏–Ω—è—Ç–æ –æ—Ç {user_name}:\n"
        f"üì¶ –ü–∞–∫–æ–≤: {data['–ü–∞–∫–æ–≤']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['–í–µ—Å']}\n"
        f"‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:\n"
        f"  üßµ –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {data['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']}\n"
        f"  üé® –§–ª–µ–∫—Å–∞: {data['–§–ª–µ–∫—Å–∞']}\n"
        f"  üè≠ {data['–≠–∫—Å—Ç—Ä—É–∑–∏—è']}\n"
        f"‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {data['–ò—Ç–æ–≥–æ']}"
    )
    await update.message.reply_text(response_text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = generate_stats()
    await update.message.reply_html(msg)

async def csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_document(document=open(EXCEL_FILE, "rb"))

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = pd.DataFrame(columns=columns)
    df.to_excel(EXCEL_FILE, index=False)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

async def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_TOKEN env variable is required")

    app = ApplicationBuilder().token(token).build()

    bot_commands = [
        BotCommand("stats", "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        BotCommand("csv", "üìé –°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª"),
        BotCommand("reset", "üßπ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")
    ]
    await app.bot.set_my_commands(bot_commands)

    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("csv", csv))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    import nest_asyncio
    nest_asyncio.apply()
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
