import os
import datetime
import csv
import re
import matplotlib.pyplot as plt
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = "8336432137:AAHAn_rsQnj4LghrgWEV7Xc7ZZrle-MMfmQ"
DATA_FILE = "report_log.csv"
PLOT_FILE = "report_plot.png"
data = []

def load_history():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, newline='') as f:
            return list(csv.DictReader(f))
    return []

def save_row(row):
    write_header = not os.path.exists(DATA_FILE)
    with open(DATA_FILE, "a", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=row.keys())
        if write_header:
            writer.writeheader()
        writer.writerow(row)

def parse_report(text, user):
    try:
        result = {"user": user, "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
                  "–ü–∞–∫–æ–≤": 0, "–í–µ—Å": 0, "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0, "–§–ª–µ–∫—Å–∞": 0, "–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º": 0, "–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç": 0, "–ò—Ç–æ–≥–æ": 0}
        lines = text.splitlines()
        for line in lines:
            line = line.strip().lower()
            if line.startswith("–ø–∞–∫–æ–≤"):
                result["–ü–∞–∫–æ–≤"] = int(re.findall(r"\d+", line)[0])
            elif line.startswith("–≤–µ—Å"):
                result["–í–µ—Å"] = int(re.findall(r"\d+", line)[0])
            elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in line:
                result["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = int(re.findall(r"\d+", line)[0])
            elif "—Ñ–ª–µ–∫—Å" in line:
                result["–§–ª–µ–∫—Å–∞"] = int(re.findall(r"\d+", line)[0])
            elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in line:
                m = re.search(r"–º(\d+)", line)
                t = re.search(r"—Ç(\d+)", line)
                if m: result["–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º"] = int(m.group(1))
                if t: result["–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç"] = int(t.group(1))
            elif line.startswith("–∏—Ç–æ–≥–æ"):
                result["–ò—Ç–æ–≥–æ"] = int(re.findall(r"\d+", line)[0])
        return result
    except:
        return None

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    text = update.message.text
    user = update.message.from_user.username or update.message.from_user.first_name
    parsed = parse_report(text, user)
    if not parsed:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç—á—ë—Ç.")
        return
    data.append(parsed)
    save_row(parsed)
    reply = f"""‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –æ—Ç {user}:
üì¶ –ü–∞–∫–æ–≤: {parsed['–ü–∞–∫–æ–≤']}
‚öñÔ∏è –í–µ—Å: {parsed['–í–µ—Å']}
‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
  üßµ –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {parsed['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']}
  üé® –§–ª–µ–∫—Å–∞: {parsed['–§–ª–µ–∫—Å–∞']}
  üè≠ –≠–∫—Å—Ç—Ä—É–∑–∏—è: –º{parsed['–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º']} —Ç{parsed['–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç']}
‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {parsed['–ò—Ç–æ–≥–æ']}"""
    await update.message.reply_text(reply)

async def main():
    global data
    data = load_history()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
