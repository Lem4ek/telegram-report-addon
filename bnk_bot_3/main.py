from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime, timedelta
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏)
ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID

user_stats = {}
current_month = datetime.now().month  # –¥–ª—è –∞–≤—Ç–æ-—Å–±—Ä–æ—Å–∞
pending_updates = {}  # {message_id: {"user": str, "values": dict, "time": datetime}}

SAVE_DELAY = timedelta(minutes=20)

def safe_int(value):
    try:
        return int(value)
    except (ValueError, TypeError):
        return 0

def is_allowed(update):
    username = update.effective_user.first_name
    user_id = update.effective_user.id
    return username in ALLOWED_USERS or user_id in ALLOWED_USERS

def process_save_jobs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞"""
    now = datetime.now()
    to_save = [mid for mid, data in pending_updates.items() if now - data["time"] >= SAVE_DELAY]
    for mid in to_save:
        data = pending_updates.pop(mid)
        save_entry(data["time"], data["user"], data["values"])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        username = data["user"]
        values = data["values"]
        user_stats.setdefault(username, {'–ü–∞–∫–æ–≤': 0, '–í–µ—Å': 0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0,
                                         '–§–ª–µ–∫—Å–∞': 0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0, '–ò—Ç–æ–≥–æ': 0})
        for k in values:
            if k in user_stats[username] and isinstance(values[k], (int, float)):
                user_stats[username][k] += values[k]

async def handle_message(update, context):
    global current_month

    # –ê–≤—Ç–æ-—Å–±—Ä–æ—Å –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    month_now = datetime.now().month
    if month_now != current_month:
        user_stats.clear()
        current_month = month_now

    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text
    values = parse_message(text)

    if not values:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –ª–∏ 3 –∏ –±–æ–ª–µ–µ –∫–ª—é—á–∞
    found_keys_count = sum(1 for v in values.values() if v not in (0, "", None))
    if found_keys_count < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0)

    pak = safe_int(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0))
    fle = safe_int(values.get("–§–ª–µ–∫—Å–∞", 0))
    ext = safe_int(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
    values["–ò—Ç–æ–≥–æ"] = pak + fle + ext

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    pending_updates[update.message.message_id] = {
        "user": username,
        "values": values,
        "time": datetime.now()
    }

    await update.message.reply_text(
        "‚è≥ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –í —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ –æ–Ω–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    )

async def handle_edited_message(update, context):
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    if not update.edited_message or not update.edited_message.text:
        return

    message_id = update.edited_message.message_id
    if message_id not in pending_updates:
        return  # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è

    text = update.edited_message.text
    values = parse_message(text)

    found_keys_count = sum(1 for v in values.values() if v not in (0, "", None))
    if found_keys_count < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0)

    pak = safe_int(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0))
    fle = safe_int(values.get("–§–ª–µ–∫—Å–∞", 0))
    ext = safe_int(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
    values["–ò—Ç–æ–≥–æ"] = pak + fle + ext

    pending_updates[message_id]["values"] = values
    pending_updates[message_id]["time"] = datetime.now()

    await update.edited_message.reply_text("‚úèÔ∏è –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

async def cmd_csv(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, 'rb'))

async def cmd_stats(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text(generate_stats(user_stats))

async def cmd_reset(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    user_stats.clear()
    pending_updates.clear()
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–±—Ä–æ—à–µ–Ω—ã! (Excel –Ω–µ —Ç—Ä–æ–Ω—É—Ç)")

async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–π ID –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")

def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")

    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    app.job_queue.run_repeating(lambda ctx: process_save_jobs(), interval=60, first=60)

    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE, handle_edited_message))

    app.run_polling()

if __name__ == "__main__":
    main()
