import asyncio
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime, timedelta
from openpyxl import load_workbook
import os
import matplotlib.pyplot as plt
import pandas as pd

TOKEN = os.getenv("TELEGRAM_TOKEN")

ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID
user_stats = {}
current_month = datetime.now().month
pending_updates = {}

SAVE_DELAY = timedelta(minutes=2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é/–æ—Ç–ø—Ä–∞–≤–∫–æ–π


def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0


def is_allowed(update):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    return username in ALLOWED_USERS or user_id in ALLOWED_USERS


# ‚úÖ –§–∏–ª—å—Ç—Ä –æ—Ç—á—ë—Ç–∞: —Ç—Ä–µ–±—É–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ª–æ–≤
def is_valid_report(text: str) -> bool:
    t = text.lower()
    groups = [
        ["–ø–∞–∫–æ–≤", "–ø–∞–∫–∏", "—É–ø–∞–∫–æ–≤"],  # –ü–∞–∫–æ–≤/–ü–∞–∫–∏/–£–ø–∞–∫–æ–≤...
        ["–≤–µ—Å"],                      # –í–µ—Å
        ["–æ—Ç—Ö–æ–¥"],                    # –û—Ç—Ö–æ–¥/–û—Ç—Ö–æ–¥—ã
        ["–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä"],               # –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞
        ["—ç–∫—Å—Ç—Ä—É–∑", "—ç–∫—Å—Ç—Ä—É–¥"],       # –≠–∫—Å—Ç—Ä—É–∑–∏—è/–≠–∫—Å—Ç—Ä—É–¥–µ—Ä
    ]
    return all(any(v in t for v in grp) for grp in groups)


def load_stats_from_excel():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ Excel –≤ user_stats –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    file_path = get_csv_file()
    if not os.path.exists(file_path):
        return

    wb = load_workbook(file_path)
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):
        date, user, pakov, ves, paket, flexa, extru, itogo = row
        if not user:
            continue
        if user not in user_stats:
            user_stats[user] = {'–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                                '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0}
            user_stats[user]['–°–º–µ–Ω'] += 1
        user_stats[user]['–ü–∞–∫–æ–≤'] += safe_float(pakov)
        user_stats[user]['–í–µ—Å'] += safe_float(ves)
        user_stats[user]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += safe_float(paket)
        user_stats[user]['–§–ª–µ–∫—Å–∞'] += safe_float(flexa)
        user_stats[user]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += safe_float(extru)
        user_stats[user]['–ò—Ç–æ–≥–æ'] += safe_float(itogo)


async def delayed_save(message_id):
    try:
        await asyncio.sleep(SAVE_DELAY.total_seconds())
        if message_id not in pending_updates:
            return

        data = pending_updates.pop(message_id)
        bot = data["context"].bot
        chat_id = data["chat_id"]
        username = data["user"]
        values = data["values"]

        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_entry(data["time"], username, values)

        # 2) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–∞–º—è—Ç–∏
        user_stats.setdefault(username, {
            '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
            '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
        })
        for k, v in values.items():
            if k in user_stats[username] and isinstance(v, (int, float)):
                user_stats[username][k] += v
        user_stats[username]['–°–º–µ–Ω'] += 1

        total_pakov_all = sum(u.get('–ü–∞–∫–æ–≤', 0.0) for u in user_stats.values())
        total_ves_all = sum(u.get('–í–µ—Å', 0.0) for u in user_stats.values())

        # 3) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üì¶  –ü–∞–∫–æ–≤: {values.get('–ü–∞–∫–æ–≤', 0.0):.2f} —à—Ç
‚öñÔ∏è –í–µ—Å: {values.get('–í–µ—Å', 0.0):.2f} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üõçÔ∏è –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {values.get('–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞', 0.0):.2f} –∫–≥
üé® –§–ª–µ–∫—Å–∞: {values.get('–§–ª–µ–∫—Å–∞', 0.0):.2f} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {values.get('–≠–∫—Å—Ç—Ä—É–∑–∏—è', 0.0):.2f} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values.get('–ò—Ç–æ–≥–æ', 0.0):.2f} –∫–≥

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_pakov_all:.2f} –ø–∞–∫–æ–≤ / {total_ves_all:.2f} –∫–≥
""".strip()

        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ —á–∞—Ç
        await bot.send_message(chat_id=chat_id, text=report)

    except Exception as e:
        # –õ–æ–≥ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –º–æ–ª—á–∞–ª–∏–≤–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
        import traceback
        print("delayed_save error:", e)
        print(traceback.format_exc())
        try:
            await data["context"].bot.send_message(
                chat_id=data.get("chat_id"),
                text="‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                     f"(–æ—à–∏–±–∫–∞: {e})"
            )
        except Exception:
            pass


async def handle_message(update, context):
    global current_month
    month_now = datetime.now().month
    if month_now != current_month:
        user_stats.clear()
        pending_updates.clear()
        current_month = month_now

    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text

    # ‚úÖ –§–∏–ª—å—Ç—Ä –æ—Ç—á—ë—Ç–∞
    if not is_valid_report(text):
        return

    values = parse_message(text)
    if not values:
        return

    # –ú–∏–Ω–∏–º—É–º 3 –Ω–µ–ø—É—Å—Ç—ã—Ö –ø–æ–ª—è
    if sum(1 for v in values.values() if v not in (0, "", None)) < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0.0)

    values["–ò—Ç–æ–≥–æ"] = safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)) + safe_float(values.get("–§–ª–µ–∫—Å–∞", 0)) + safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))

    message_id = update.message.message_id
    pending_updates[message_id] = {
        "user": username,
        "values": values,
        "time": datetime.now(),
        "chat_id": update.effective_chat.id,
        "context": context
    }

    asyncio.create_task(delayed_save(message_id))


async def handle_edited_message(update, context):
    if not update.edited_message or not update.edited_message.text:
        return
    message_id = update.edited_message.message_id
    if message_id not in pending_updates:
        return

    text = update.edited_message.text

    if not is_valid_report(text):
        return

    values = parse_message(text)
    if sum(1 for v in values.values() if v not in (0, "", None)) < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0.0)

    values["–ò—Ç–æ–≥–æ"] = safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)) + safe_float(values.get("–§–ª–µ–∫—Å–∞", 0)) + safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))

    pending_updates[message_id]["values"] = values
    pending_updates[message_id]["time"] = datetime.now()


async def cmd_csv(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    file_path = get_csv_file()
    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(file_path, 'rb'))


async def cmd_stats(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text=generate_stats(user_stats))


async def cmd_reset(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    user_stats.clear()
    pending_updates.clear()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–±—Ä–æ—à–µ–Ω—ã! (Excel –Ω–µ —Ç—Ä–æ–Ω—É—Ç)")


async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–µ ID –≤ –ª–∏—á–∫–µ.")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"üÜî –í–∞—à Telegram ID: `{update.effective_user.id}`",
                                   parse_mode="Markdown")


async def cmd_graf(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    file_path = get_csv_file()
    if not os.path.exists(file_path):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    df = pd.read_excel(file_path)
    if df.empty:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    df.columns = ["–î–∞—Ç–∞", "–ò–º—è", "–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è", "–ò—Ç–æ–≥–æ"]
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

    # üìà –ì—Ä–∞—Ñ–∏–∫ 1 ‚Äî –ü—Ä–æ–¥—É–∫—Ü–∏—è –∏ –æ—Ç—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º
    daily = df.groupby(df["–î–∞—Ç–∞"].dt.date).agg({"–í–µ—Å": "sum", "–ò—Ç–æ–≥–æ": "sum"}).reset_index()
    plt.figure()
    plt.plot(daily["–î–∞—Ç–∞"], daily["–í–µ—Å"], marker="o", label="–í–µ—Å (–∫–≥)")
    plt.plot(daily["–î–∞—Ç–∞"], daily["–ò—Ç–æ–≥–æ"], marker="o", label="–û—Ç—Ö–æ–¥—ã (–∫–≥)")
    plt.title("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –æ—Ç—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö–≥")
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    img1 = "/tmp/graf1.png"
    plt.savefig(img1)
    plt.close()
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(img1, "rb"))

    # üìä –ì—Ä–∞—Ñ–∏–∫ 2 ‚Äî –¢–û–ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
    top_users = df.groupby("–ò–º—è")["–í–µ—Å"].sum().sort_values(ascending=False)
    plt.figure()
    top_users.plot(kind="bar")
    plt.title("–¢–û–ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –ø–æ –≤–µ—Å—É")
    plt.ylabel("–ö–≥")
    plt.xticks(rotation=45)
    plt.tight_layout()
    img2 = "/tmp/graf2.png"
    plt.savefig(img2)
    plt.close()
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(img2, "rb"))

    # ü•ß –ì—Ä–∞—Ñ–∏–∫ 3 ‚Äî –î–æ–ª—è –æ—Ç—Ö–æ–¥–æ–≤
    total_weight = df["–í–µ—Å"].sum()
    total_waste = df["–ò—Ç–æ–≥–æ"].sum()
    labels = ["–ü—Ä–æ–¥—É–∫—Ü–∏—è", "–û—Ç—Ö–æ–¥—ã"]
    sizes = [total_weight - total_waste, total_waste]
    plt.figure()
    plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=90)
    plt.axis("equal")
    plt.title("–î–æ–ª—è –æ—Ç—Ö–æ–¥–æ–≤ –≤ –æ–±—â–µ–π –º–∞—Å—Å–µ")
    img3 = "/tmp/graf3.png"
    plt.savefig(img3)
    plt.close()
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(img3, "rb"))


async def cmd_import(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    # –£–¥–∞–ª–∏–º —Ç–µ–∫—É—â–∏–π Excel-—Ñ–∞–π–ª –∏ —Å–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from pathlib import Path
    current_file = Path(get_csv_file())
    if current_file.exists():
        current_file.unlink()
        user_stats.clear()

    if not update.message.document:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª.")
        return

    file = await update.message.document.get_file()
    file_path = f"/tmp/imported.xlsx"
    await file.download_to_drive(file_path)

    try:
        wb = load_workbook(file_path)
        ws = wb.active
        imported = 0

        from data_utils import save_entry

        for row in ws.iter_rows(min_row=2, values_only=True):
            date_str, user, pakov, ves, paket, flexa, extru, itogo = row
            if not user:
                continue

            try:
                if isinstance(date_str, str):
                    date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
                else:
                    date = date_str
            except Exception:
                date = datetime.now()

            values = {
                "–ü–∞–∫–æ–≤": pakov or 0,
                "–í–µ—Å": ves or 0,
                "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": paket or 0,
                "–§–ª–µ–∫—Å–∞": flexa or 0,
                "–≠–∫—Å—Ç—Ä—É–∑–∏—è": extru or 0,
                "–ò—Ç–æ–≥–æ": itogo or 0
            }

            save_entry(date, user, values)

            if user not in user_stats:
                user_stats[user] = {
                    '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                    '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
                }

            user_stats[user]['–ü–∞–∫–æ–≤'] += values["–ü–∞–∫–æ–≤"]
            user_stats[user]['–í–µ—Å'] += values["–í–µ—Å"]
            user_stats[user]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += values["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"]
            user_stats[user]['–§–ª–µ–∫—Å–∞'] += values["–§–ª–µ–∫—Å–∞"]
            user_stats[user]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += values["–≠–∫—Å—Ç—Ä—É–∑–∏—è"]
            user_stats[user]['–ò—Ç–æ–≥–æ'] += values["–ò—Ç–æ–≥–æ"]
            user_stats[user]['–°–º–µ–Ω'] += 1

            imported += 1

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported}")

    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")


def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")

    load_stats_from_excel()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(CommandHandler("graf", cmd_graf))
    app.add_handler(MessageHandler(filters.Document.ALL & filters.Caption("/import"), cmd_import))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE, handle_edited_message))

    app.run_polling()


if __name__ == "__main__":
    main()
