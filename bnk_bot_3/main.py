from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")

user_stats = {}
current_month = datetime.now().month  # –¥–ª—è –∞–≤—Ç–æ-—Å–±—Ä–æ—Å–∞

def safe_int(value):
    try:
        return int(value)
    except (ValueError, TypeError):
        return 0

async def handle_message(update, context):
    global current_month, user_stats

    # –ê–≤—Ç–æ-—Å–±—Ä–æ—Å –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    month_now = datetime.now().month
    if month_now != current_month:
        user_stats.clear()
        current_month = month_now

    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text
    values = parse_message(text)

    if values:
        for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
            values.setdefault(key, 0)

        pak = safe_int(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0))
        fle = safe_int(values.get("–§–ª–µ–∫—Å–∞", 0))
        ext = safe_int(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
        values["–ò—Ç–æ–≥–æ"] = pak + fle + ext

        save_entry(datetime.now(), username, values)

        user_stats.setdefault(username, {'–ü–∞–∫–æ–≤': 0, '–í–µ—Å': 0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0, '–§–ª–µ–∫—Å–∞': 0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0, '–ò—Ç–æ–≥–æ': 0})
        for k in values:
            if k in user_stats[username] and isinstance(values[k], (int, float)):
                user_stats[username][k] += values[k]

        total_pakov_all = sum(u['–ü–∞–∫–æ–≤'] for u in user_stats.values())
        total_ves_all = sum(u['–í–µ—Å'] for u in user_stats.values())

        report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üßÆ –ü–∞–∫–æ–≤: {values['–ü–∞–∫–æ–≤']} —à—Ç
‚öñÔ∏è –í–µ—Å: {values['–í–µ—Å']} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {pak} –∫–≥
üñ®Ô∏è –§–ª–µ–∫—Å–∞: {fle} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {ext} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values['–ò—Ç–æ–≥–æ']} –∫–≥

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_pakov_all} –ø–∞–∫–æ–≤ / {total_ves_all} –∫–≥
"""

        await update.message.reply_text(report.strip())

async def cmd_csv(update, context):
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, 'rb'))

async def cmd_stats(update, context):
    await update.message.reply_text(generate_stats(user_stats))

async def cmd_reset(update, context):
    global user_stats
    user_stats.clear()
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω–∞! (Excel –Ω–µ —Ç—Ä–æ–Ω—É—Ç)")

def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
