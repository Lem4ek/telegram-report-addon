
import asyncio
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime, timedelta
from openpyxl import load_workbook
from pathlib import Path
import os
import matplotlib.pyplot as plt
import pandas as pd

TOKEN = os.getenv("TELEGRAM_TOKEN")

ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID
user_stats = {}
current_month = datetime.now().month
pending_updates = {}

SAVE_DELAY = timedelta(minutes=2)  # —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 –º–∏–Ω—É—Ç—ã

def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0

def is_allowed(update):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    return username in ALLOWED_USERS or user_id in ALLOWED_USERS

def load_stats_from_excel():
    file_path = get_csv_file()
    if not os.path.exists(file_path):
        return

    wb = load_workbook(file_path)
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):
        date, user, pakov, ves, paket, flexa, extru, itogo = row
        if not user:
            continue
        if user not in user_stats:
            user_stats[user] = {
                '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
            }
        else:
            user_stats[user].setdefault("–°–º–µ–Ω", 0)

        user_stats[user]['–ü–∞–∫–æ–≤'] += safe_float(pakov)
        user_stats[user]['–í–µ—Å'] += safe_float(ves)
        user_stats[user]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += safe_float(paket)
        user_stats[user]['–§–ª–µ–∫—Å–∞'] += safe_float(flexa)
        user_stats[user]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += safe_float(extru)
        user_stats[user]['–ò—Ç–æ–≥–æ'] += safe_float(itogo)
        user_stats[user]['–°–º–µ–Ω'] += 1

async def cmd_import(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not update.message.document:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª.")
        return

    # –£–¥–∞–ª–∏–º —Ç–µ–∫—É—â–∏–π Excel-—Ñ–∞–π–ª –∏ —Å–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    current_file = Path(get_csv_file())
    if current_file.exists():
        current_file.unlink()
        user_stats.clear()

    file = await update.message.document.get_file()
    file_path = f"/tmp/imported.xlsx"
    await file.download_to_drive(file_path)

    try:
        wb = load_workbook(file_path)
        ws = wb.active
        imported = 0

        for row in ws.iter_rows(min_row=2, values_only=True):
            date_str, user, pakov, ves, paket, flexa, extru, itogo = row
            if not user:
                continue

            try:
                if isinstance(date_str, str):
                    date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
                else:
                    date = date_str
            except Exception:
                date = datetime.now()

            values = {
                "–ü–∞–∫–æ–≤": pakov or 0,
                "–í–µ—Å": ves or 0,
                "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": paket or 0,
                "–§–ª–µ–∫—Å–∞": flexa or 0,
                "–≠–∫—Å—Ç—Ä—É–∑–∏—è": extru or 0,
                "–ò—Ç–æ–≥–æ": itogo or 0
            }

            save_entry(date, user, values)

            if user not in user_stats:
                user_stats[user] = {
                    '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                    '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
                }

            user_stats[user]['–ü–∞–∫–æ–≤'] += values["–ü–∞–∫–æ–≤"]
            user_stats[user]['–í–µ—Å'] += values["–í–µ—Å"]
            user_stats[user]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += values["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"]
            user_stats[user]['–§–ª–µ–∫—Å–∞'] += values["–§–ª–µ–∫—Å–∞"]
            user_stats[user]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += values["–≠–∫—Å—Ç—Ä—É–∑–∏—è"]
            user_stats[user]['–ò—Ç–æ–≥–æ'] += values["–ò—Ç–æ–≥–æ"]
            user_stats[user]['–°–º–µ–Ω'] += 1

            imported += 1

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported}")

    except Exception as e:
        import traceback
        traceback.print_exc()
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")

# ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π main.py –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –Ω–∏–∂–µ, –∫–∞–∫ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)
