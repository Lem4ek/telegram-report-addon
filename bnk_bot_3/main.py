import os
from datetime import datetime
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from parser import parse_message
from data_utils import save_entry, get_csv_file, generate_stats
from openpyxl import load_workbook

TOKEN = os.getenv("TELEGRAM_TOKEN")

user_stats = {}
user_days = {}
current_month = datetime.now().month

ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ Telegram ID

def safe_int(v):
    try:
        return int(v)
    except:
        return 0

def safe_float(v):
    try:
        return float(str(v).replace(",", "."))
    except:
        return 0.0

def is_allowed(update):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    return user_id in ALLOWED_USERS or username in ALLOWED_USERS

def load_stats_from_excel():
    file_path = get_csv_file()
    if not os.path.exists(file_path):
        return

    from datetime import datetime
    wb = load_workbook(file_path, data_only=True)
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):
        date, user, pakov, ves, paket, flexa, extru, itogo = row
        if not user or not date:
            continue

        username = str(user)
        user_stats.setdefault(username, {
            '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0, '–§–ª–µ–∫—Å–∞': 0.0,
            '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
        })
        user_days.setdefault(username, set())
        user_days[username].add(date.date())

        user_stats[username]['–ü–∞–∫–æ–≤'] += safe_float(pakov)
        user_stats[username]['–í–µ—Å'] += safe_float(ves)
        user_stats[username]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += safe_float(paket)
        user_stats[username]['–§–ª–µ–∫—Å–∞'] += safe_float(flexa)
        user_stats[username]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += safe_float(extru)
        user_stats[username]['–ò—Ç–æ–≥–æ'] += safe_float(itogo)

    for username, days in user_days.items():
        user_stats[username]['–°–º–µ–Ω'] = len(days)

async def handle_message(update, context):
    global current_month

    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text
    values = parse_message(text)

    if not values:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π
    if sum(1 for v in values.values() if v not in (0, "", None)) < 3:
        return

    # –ê–≤—Ç–æ-—Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
    month_now = datetime.now().month
    if month_now != current_month:
        user_stats.clear()
        user_days.clear()
        current_month = month_now

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0)

    pak = safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0))
    fle = safe_float(values.get("–§–ª–µ–∫—Å–∞", 0))
    ext = safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
    values["–ò—Ç–æ–≥–æ"] = pak + fle + ext

    save_entry(datetime.now(), username, values)

    user_stats.setdefault(username, {
        '–ü–∞–∫–æ–≤': 0, '–í–µ—Å': 0,
        '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0, '–§–ª–µ–∫—Å–∞': 0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0, '–ò—Ç–æ–≥–æ': 0, '–°–º–µ–Ω': 0
    })
    for k in values:
        if k in user_stats[username]:
            user_stats[username][k] += values[k]

    # –£—á—ë—Ç —Å–º–µ–Ω
    user_days.setdefault(username, set())
    user_days[username].add(datetime.now().date())
    user_stats[username]['–°–º–µ–Ω'] = len(user_days[username])

    total_pakov_all = sum(u['–ü–∞–∫–æ–≤'] for u in user_stats.values())
    total_ves_all = sum(u['–í–µ—Å'] for u in user_stats.values())
    shifts_cnt = int(user_stats[username].get('–°–º–µ–Ω', 0))

    report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üßÆ –ü–∞–∫–æ–≤: {values['–ü–∞–∫–æ–≤']} —à—Ç
‚öñÔ∏è –í–µ—Å: {values['–í–µ—Å']} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {pak} –∫–≥
üñ®Ô∏è –§–ª–µ–∫—Å–∞: {fle} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {ext} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values['–ò—Ç–æ–≥–æ']} –∫–≥

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üóì –°–º–µ–Ω –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {shifts_cnt}

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_pakov_all} –ø–∞–∫–æ–≤ / {total_ves_all} –∫–≥
"""
    await update.message.reply_text(report.strip())

async def cmd_stats(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text(generate_stats(user_stats))

async def cmd_csv(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, 'rb'))

async def cmd_reset(update, context):
    if not is_allowed(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    user_stats.clear()
    user_days.clear()
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")

async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–π ID –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")

def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")
    
    load_stats_from_excel()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
