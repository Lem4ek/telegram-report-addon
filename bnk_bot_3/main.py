import os
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime
from collections import defaultdict

TOKEN = os.getenv("TELEGRAM_TOKEN")

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (Telegram ID)
ALLOWED_USERS = [1198365511, 508532161]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_stats = {}
user_days = defaultdict(set)
current_month = datetime.now().month

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_allowed(update):
    user_id = update.effective_user.id
    return user_id in ALLOWED_USERS

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
def safe_number(value):
    try:
        return float(value)
    except:
        return 0

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    global current_month

    if not update.message or not update.message.text:
        return

    text = update.message.text.lower()
    if "–≤–µ—Å" not in text and "–∏—Ç–æ–≥–æ" not in text:
        return  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π, –∞ –Ω–µ –æ—Ç—á—ë—Ç—ã

    now = datetime.now()
    if now.month != current_month:
        user_stats.clear()
        user_days.clear()
        current_month = now.month

    username = update.effective_user.first_name
    parsed = parse_message(update.message.text)

    if not parsed:
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    pakov = safe_number(parsed.get("–ü–∞–∫–æ–≤", 0))
    ves = safe_number(parsed.get("–í–µ—Å", 0))
    pak = safe_number(parsed.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0))
    fle = safe_number(parsed.get("–§–ª–µ–∫—Å–∞", 0))
    ext = safe_number(parsed.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
    total = pak + fle + ext

    parsed["–ü–∞–∫–æ–≤"] = pakov
    parsed["–í–µ—Å"] = ves
    parsed["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = pak
    parsed["–§–ª–µ–∫—Å–∞"] = fle
    parsed["–≠–∫—Å—Ç—Ä—É–∑–∏—è"] = ext
    parsed["–ò—Ç–æ–≥–æ"] = total

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    save_entry(now, username, parsed)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if username not in user_stats:
        user_stats[username] = {
            "–ü–∞–∫–æ–≤": 0, "–í–µ—Å": 0, "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0,
            "–§–ª–µ–∫—Å–∞": 0, "–≠–∫—Å—Ç—Ä—É–∑–∏—è": 0, "–ò—Ç–æ–≥–æ": 0
        }

    for key in parsed:
        if key in user_stats[username]:
            user_stats[username][key] += parsed[key]

    user_days[username].add(now.date())

    total_pakov_all = sum(u['–ü–∞–∫–æ–≤'] for u in user_stats.values())
    total_ves_all = sum(u['–í–µ—Å'] for u in user_stats.values())

    report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üßÆ –ü–∞–∫–æ–≤: {int(pakov)} —à—Ç
‚öñÔ∏è –í–µ—Å: {int(ves)} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {int(pak)} –∫–≥
üñ®Ô∏è –§–ª–µ–∫—Å–∞: {int(fle)} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {int(ext)} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {int(total)} –∫–≥

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {int(total_pakov_all)} –ø–∞–∫–æ–≤ / {int(total_ves_all)} –∫–≥
"""
    await update.message.reply_text(report.strip())

# /csv ‚Äî —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
async def cmd_csv(update, context):
    if not is_allowed(update):
        return
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, 'rb'))

# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def cmd_stats(update, context):
    if not is_allowed(update):
        return

    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"]
    for user in user_stats:
        stats = user_stats[user]
        shifts = len(user_days.get(user, []))
        lines.append(
            f"üë§ {user} ({shifts} —Å–º–µ–Ω):\n"
            f"  üßÉ –ü–∞–∫–æ–≤: {int(stats['–ü–∞–∫–æ–≤'])} —à—Ç\n"
            f"  ‚öñÔ∏è  –í–µ—Å: {int(stats['–í–µ—Å'])} –∫–≥\n"
            f"  üõçÔ∏è –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {int(stats['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'])} –∫–≥\n"
            f"  üé® –§–ª–µ–∫—Å–∞: {int(stats['–§–ª–µ–∫—Å–∞'])} –∫–≥\n"
            f"  üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {int(stats['–≠–∫—Å—Ç—Ä—É–∑–∏—è'])} –∫–≥\n"
            f"  ‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {int(stats['–ò—Ç–æ–≥–æ'])} –∫–≥"
        )

    await update.message.reply_text("\n".join(lines))

# /reset ‚Äî —Å–±—Ä–æ—Å
async def cmd_reset(update, context):
    if not is_allowed(update):
        return
    user_stats.clear()
    user_days.clear()
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω–∞! (Excel –Ω–µ —Ç—Ä–æ–Ω—É—Ç)")

# /myid ‚Äî Telegram ID
async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–π ID –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞.")
        return
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
