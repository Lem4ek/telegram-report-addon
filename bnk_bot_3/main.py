import os
from datetime import datetime
from openpyxl import load_workbook
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file, get_file_path

TOKEN = os.getenv("TELEGRAM_TOKEN")

ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–µ ID

user_stats = {}
user_days = {}
current_month = datetime.now().month

def safe_float(value):
    try:
        return float(value)
    except:
        return 0.0

def is_allowed(update):
    return update.effective_user.id in ALLOWED_USERS

def load_stats_from_excel():
    path = get_file_path()
    if not os.path.exists(path):
        return

    wb = load_workbook(path)
    ws = wb.active

    for i, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        try:
            date_str, username, pakov, ves, paket, flexa, ext, total = row

            if isinstance(date_str, str):
                date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
            else:
                date = date_str

            user_stats.setdefault(username, {
                '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
            })

            user_stats[username]['–ü–∞–∫–æ–≤']        += safe_float(pakov)
            user_stats[username]['–í–µ—Å']          += safe_float(ves)
            user_stats[username]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += safe_float(paket)
            user_stats[username]['–§–ª–µ–∫—Å–∞']       += safe_float(flexa)
            user_stats[username]['–≠–∫—Å—Ç—Ä—É–∑–∏—è']    += safe_float(ext)
            user_stats[username]['–ò—Ç–æ–≥–æ']        += safe_float(total)

            user_days.setdefault(username, set()).add(date.date())
        except Exception as e:
            print(f"[ERR] –°—Ç—Ä–æ–∫–∞ {i}: {e}")

async def handle_message(update, context):
    global current_month

    if not update.message or not update.message.text:
        return

    text = update.message.text
    values = parse_message(text)
    if not values:
        return

    found_keys = sum(1 for v in values.values() if v not in (0, "", None))
    if found_keys < 3:
        return

    now = datetime.now()
    if now.month != current_month:
        user_stats.clear()
        user_days.clear()
        current_month = now.month

    username = update.effective_user.first_name
    values.setdefault("–ü–∞–∫–æ–≤", 0)
    values.setdefault("–í–µ—Å", 0)
    values.setdefault("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)
    values.setdefault("–§–ª–µ–∫—Å–∞", 0)
    values.setdefault("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0)

    values["–ò—Ç–æ–≥–æ"] = (
        safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)) +
        safe_float(values.get("–§–ª–µ–∫—Å–∞", 0)) +
        safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))
    )

    save_entry(now, username, values)

    user_stats.setdefault(username, {
        '–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
        '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0, '–°–º–µ–Ω': 0
    })

    user_days.setdefault(username, set()).add(now.date())

    for k in values:
        if k in user_stats[username]:
            user_stats[username][k] += safe_float(values[k])

    total_pakov = sum(user['–ü–∞–∫–æ–≤'] for user in user_stats.values())
    total_ves = sum(user['–í–µ—Å'] for user in user_stats.values())

    report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üßÆ –ü–∞–∫–æ–≤: {values['–ü–∞–∫–æ–≤']} —à—Ç
‚öñÔ∏è –í–µ—Å: {values['–í–µ—Å']} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {values['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']} –∫–≥
üñ®Ô∏è –§–ª–µ–∫—Å–∞: {values['–§–ª–µ–∫—Å–∞']} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {values['–≠–∫—Å—Ç—Ä—É–∑–∏—è']} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values['–ò—Ç–æ–≥–æ']} –∫–≥

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {int(total_pakov)} –ø–∞–∫–æ–≤ / {int(total_ves)} –∫–≥
"""
    await update.message.reply_text(report.strip())

async def cmd_csv(update, context):
    if not is_allowed(update):
        return
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, "rb"))

async def cmd_stats(update, context):
    if not is_allowed(update):
        return
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º:"]
    for user, days in user_days.items():
        lines.append(f"üë§ {user}: {len(days)} —Å–º–µ–Ω")
    await update.message.reply_text("\n".join(lines))

async def cmd_reset(update, context):
    if not is_allowed(update):
        return
    user_stats.clear()
    user_days.clear()
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")

async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫—É –±–æ—Ç—É.")
        return
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à ID: `{user_id}`", parse_mode="Markdown")

def main():
    load_stats_from_excel()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.run_polling()

if __name__ == "__main__":
    main()
