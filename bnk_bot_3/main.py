import asyncio
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime, timedelta
from openpyxl import load_workbook
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")

ALLOWED_USERS = [1198365511, 508532161]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID
user_stats = {}
current_month = datetime.now().month
pending_updates = {}  # {message_id: {...}}

SAVE_DELAY = timedelta(minutes=2)  # —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 –º–∏–Ω—É—Ç—ã


def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0


def is_allowed(update):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    return username in ALLOWED_USERS or user_id in ALLOWED_USERS


def load_stats_from_excel():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ Excel –≤ user_stats –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    file_path = get_csv_file()
    if not os.path.exists(file_path):
        return  # —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç

    wb = load_workbook(file_path)
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        date, user, pakov, ves, paket, flexa, extru, itogo = row
        if not user:
            continue
        if user not in user_stats:
            user_stats[user] = {'–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                                '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0}
        user_stats[user]['–ü–∞–∫–æ–≤'] += pakov or 0
        user_stats[user]['–í–µ—Å'] += ves or 0
        user_stats[user]['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞'] += paket or 0
        user_stats[user]['–§–ª–µ–∫—Å–∞'] += flexa or 0
        user_stats[user]['–≠–∫—Å—Ç—Ä—É–∑–∏—è'] += extru or 0
        user_stats[user]['–ò—Ç–æ–≥–æ'] += itogo or 0


async def delayed_save(message_id):
    """–ñ–¥—ë—Ç SAVE_DELAY –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –≤ –±—É—Ñ–µ—Ä–µ"""
    await asyncio.sleep(SAVE_DELAY.total_seconds())
    if message_id in pending_updates:
        data = pending_updates.pop(message_id)
        save_entry(data["time"], data["user"], data["values"])
        username = data["user"]
        values = data["values"]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats.setdefault(username, {'–ü–∞–∫–æ–≤': 0.0, '–í–µ—Å': 0.0, '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0.0,
                                         '–§–ª–µ–∫—Å–∞': 0.0, '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0.0, '–ò—Ç–æ–≥–æ': 0.0})
        for k in values:
            if k in user_stats[username] and isinstance(values[k], (int, float)):
                user_stats[username][k] += values[k]

        # –ò—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        total_pakov_all = sum(u['–ü–∞–∫–æ–≤'] for u in user_stats.values())
        total_ves_all = sum(u['–í–µ—Å'] for u in user_stats.values())

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        report = f"""
üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:

üßÆ –ü–∞–∫–æ–≤: {values['–ü–∞–∫–æ–≤']:.2f} —à—Ç
‚öñÔ∏è –í–µ—Å: {values['–í–µ—Å']:.2f} –∫–≥

‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:
üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {values['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']:.2f} –∫–≥
üñ®Ô∏è –§–ª–µ–∫—Å–∞: {values['–§–ª–µ–∫—Å–∞']:.2f} –∫–≥
üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {values['–≠–∫—Å—Ç—Ä—É–∑–∏—è']:.2f} –∫–≥

üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values['–ò—Ç–æ–≥–æ']:.2f} –∫–≥

üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_pakov_all:.2f} –ø–∞–∫–æ–≤ / {total_ves_all:.2f} –∫–≥
""".strip()

        await data["context"].bot.send_message(chat_id=data["chat_id"], text=report)


async def handle_message(update, context):
    global current_month
    month_now = datetime.now().month
    if month_now != current_month:
        user_stats.clear()
        pending_updates.clear()
        current_month = month_now

    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text
    values = parse_message(text)
    if not values:
        return

    if sum(1 for v in values.values() if v not in (0, "", None)) < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0.0)

    values["–ò—Ç–æ–≥–æ"] = safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)) + safe_float(values.get("–§–ª–µ–∫—Å–∞", 0)) + safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))

    # –ö–ª–∞–¥—ë–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
    message_id = update.message.message_id
    pending_updates[message_id] = {
        "user": username,
        "values": values,
        "time": datetime.now(),
        "chat_id": update.effective_chat.id,
        "context": context
    }

    asyncio.create_task(delayed_save(message_id))


async def handle_edited_message(update, context):
    if not update.edited_message or not update.edited_message.text:
        return
    message_id = update.edited_message.message_id
    if message_id not in pending_updates:
        return

    text = update.edited_message.text
    values = parse_message(text)
    if sum(1 for v in values.values() if v not in (0, "", None)) < 3:
        return

    for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
        values.setdefault(key, 0.0)

    values["–ò—Ç–æ–≥–æ"] = safe_float(values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)) + safe_float(values.get("–§–ª–µ–∫—Å–∞", 0)) + safe_float(values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0))

    pending_updates[message_id]["values"] = values
    pending_updates[message_id]["time"] = datetime.now()


async def cmd_csv(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    file_path = get_csv_file()
    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(file_path, 'rb'))


async def cmd_stats(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text=generate_stats(user_stats))


async def cmd_reset(update, context):
    if not is_allowed(update):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    user_stats.clear()
    pending_updates.clear()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–±—Ä–æ—à–µ–Ω—ã! (Excel –Ω–µ —Ç—Ä–æ–Ω—É—Ç)")


async def cmd_myid(update, context):
    if update.message.chat.type != "private":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–µ ID –≤ –ª–∏—á–∫–µ.")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"üÜî –í–∞—à Telegram ID: `{update.effective_user.id}`",
                                   parse_mode="Markdown")


def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_stats_from_excel()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE, handle_edited_message))

    app.run_polling()


if __name__ == "__main__":
    main()
