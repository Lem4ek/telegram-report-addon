from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler
from parser import parse_message
from data_utils import save_entry, generate_stats, get_csv_file
from datetime import datetime
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")

user_stats = {}

async def handle_message(update, context):
    if not update.message or not update.message.text:
        return

    username = update.effective_user.first_name
    text = update.message.text
    values = parse_message(text)

    if values:
        for key in ["–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è"]:
            values.setdefault(key, 0)

        values["–ò—Ç–æ–≥–æ"] = (
            values.get("–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", 0)
            + values.get("–§–ª–µ–∫—Å–∞", 0)
            + values.get("–≠–∫—Å—Ç—Ä—É–∑–∏—è", 0)
        )

        save_entry(datetime.now(), username, values)

        user_stats.setdefault(username, {
            '–ü–∞–∫–æ–≤': 0, '–í–µ—Å': 0,
            '–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞': 0, '–§–ª–µ–∫—Å–∞': 0,
            '–≠–∫—Å—Ç—Ä—É–∑–∏—è': 0, '–ò—Ç–æ–≥–æ': 0
        })
        for k in values:
            if k in user_stats[username] and isinstance(values[k], (int, float)):
                user_stats[username][k] += values[k]

        total_pakov_all = sum(u['–ü–∞–∫–æ–≤'] for u in user_stats.values())
        total_ves_all = sum(u['–í–µ—Å'] for u in user_stats.values())

        report = (
            "üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:"
            f"üßÆ –ü–∞–∫–æ–≤: {values['–ü–∞–∫–æ–≤']} —à—Ç"
            f"‚öñÔ∏è –í–µ—Å: {values['–í–µ—Å']} –∫–≥"
            "‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:"
            f"üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {values['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']} –∫–≥"
            f"üñ®Ô∏è –§–ª–µ–∫—Å–∞: {values['–§–ª–µ–∫—Å–∞']} –∫–≥"
            f"üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {values['–≠–∫—Å—Ç—Ä—É–∑–∏—è']} –∫–≥"
            f"üßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {values['–ò—Ç–æ–≥–æ']} –∫–≥"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_pakov_all} –ø–∞–∫–æ–≤ / {total_ves_all} –∫–≥"
        )

        await update.message.reply_text(report)

async def cmd_csv(update, context):
    file_path = get_csv_file()
    await update.message.reply_document(open(file_path, 'rb'))

async def cmd_stats(update, context):
    await update.message.reply_text(generate_stats(user_stats))

def main():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN env variable is required")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("csv", cmd_csv))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
