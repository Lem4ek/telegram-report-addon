import re, csv, os, json
from datetime import datetime

PATTERNS = {
    "–ø–∞–∫–æ–≤": r"–ü–∞–∫–æ–≤\s*[-:‚Äì‚Äî]?\s*(\d+)",
    "–≤–µ—Å": r"–í–µ—Å\s*[-:‚Äì‚Äî]?\s*(\d+)",
    "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": r"–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞\s*[-:‚Äì‚Äî]?\s*(\d+)",
    "—Ñ–ª–µ–∫—Å–∞": r"(–§–ª–µ–∫—Å–∞|–§–ª–µ–∫—Å–æ–≥—Ä–∞—Ñ–∏—è)\s*[-:‚Äì‚Äî]?\s*(\d+)",
    "—ç–∫—Å—Ç—Ä—É–∑–∏—è": r"–≠–∫—Å—Ç—Ä—É–∑–∏—è[^\d]*(\d+)?[^\d]*(\d+)?",
    "–∏—Ç–æ–≥–æ": r"–ò—Ç–æ–≥–æ\s*[-:‚Äì‚Äî]?\s*(\d+)"
}

def extract_data(text):
    results = {}
    for key, pattern in PATTERNS.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            if key == "—ç–∫—Å—Ç—Ä—É–∑–∏—è":
                results[key] = sum(int(g) for g in match.groups() if g)
            else:
                results[key] = int(match.group(1))
    return results

def format_report(parsed):
    lines = ["üì¶ –û—Ç—á—ë—Ç –∑–∞ —Å–º–µ–Ω—É:\n"]
    if "–ø–∞–∫–æ–≤" in parsed: lines.append(f"üßÆ –ü–∞–∫–æ–≤: {parsed['–ø–∞–∫–æ–≤']} —à—Ç")
    if "–≤–µ—Å" in parsed: lines.append(f"‚öñÔ∏è –í–µ—Å: {parsed['–≤–µ—Å']} –∫–≥")
    lines.append("\n‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:")
    if "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in parsed: lines.append(f"üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {parsed['–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']} –∫–≥")
    if "—Ñ–ª–µ–∫—Å–∞" in parsed: lines.append(f"üñ®Ô∏è –§–ª–µ–∫—Å–∞: {parsed['—Ñ–ª–µ–∫—Å–∞']} –∫–≥")
    if "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in parsed: lines.append(f"üßµ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {parsed['—ç–∫—Å—Ç—Ä—É–∑–∏—è']} –∫–≥")
    if "–∏—Ç–æ–≥–æ" in parsed: lines.append(f"\nüßæ –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {parsed['–∏—Ç–æ–≥–æ']} –∫–≥")
    return "\n".join(lines)

def append_to_csv(file, user, parsed):
    exists = os.path.exists(file)
    with open(file, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not exists:
            writer.writerow(["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ü–∞–∫–æ–≤", "–í–µ—Å", "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "–§–ª–µ–∫—Å–∞", "–≠–∫—Å—Ç—Ä—É–∑–∏—è", "–ò—Ç–æ–≥–æ"])
        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            user,
            parsed.get("–ø–∞–∫–æ–≤", ""),
            parsed.get("–≤–µ—Å", ""),
            parsed.get("–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", ""),
            parsed.get("—Ñ–ª–µ–∫—Å–∞", ""),
            parsed.get("—ç–∫—Å—Ç—Ä—É–∑–∏—è", ""),
            parsed.get("–∏—Ç–æ–≥–æ", "")
        ]
        writer.writerow(row)

def load_users(path):
    return json.load(open(path)) if os.path.exists(path) else {}

def save_users(path, data):
    with open(path, "w") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_stats(file):
    if not os.path.exists(file):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    with open(file, encoding="utf-8") as f:
        lines = f.readlines()[1:]
    return f"üë• –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(lines)}"